{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/Common/Company.ts","webpack:///./src/app/Common/Customer.ts","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/components/create-company/create-company.component.css","webpack:///./src/app/components/create-company/create-company.component.html","webpack:///./src/app/components/create-company/create-company.component.ts","webpack:///./src/app/components/create-customer/create-customer.component.css","webpack:///./src/app/components/create-customer/create-customer.component.html","webpack:///./src/app/components/create-customer/create-customer.component.ts","webpack:///./src/app/components/get-all-companies/get-all-companies.component.css","webpack:///./src/app/components/get-all-companies/get-all-companies.component.html","webpack:///./src/app/components/get-all-companies/get-all-companies.component.ts","webpack:///./src/app/components/get-all-customers/get-all-customers.component.css","webpack:///./src/app/components/get-all-customers/get-all-customers.component.html","webpack:///./src/app/components/get-all-customers/get-all-customers.component.ts","webpack:///./src/app/components/home/home.component.css","webpack:///./src/app/components/home/home.component.html","webpack:///./src/app/components/home/home.component.ts","webpack:///./src/app/components/update-company/update-company.component.css","webpack:///./src/app/components/update-company/update-company.component.html","webpack:///./src/app/components/update-company/update-company.component.ts","webpack:///./src/app/components/update-customer/update-customer.component.css","webpack:///./src/app/components/update-customer/update-customer.component.html","webpack:///./src/app/components/update-customer/update-customer.component.ts","webpack:///./src/app/pipes/filter.pipe.ts","webpack:///./src/app/services/shared-company-data.service.ts","webpack:///./src/app/services/shared-customer-data.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","export class Company{\r\n    \r\n    constructor(public id : number, \r\n        public name : string,\r\n        public password : string,\r\n        public email : string)\r\n        {\r\n            \r\n        }\r\n}","export class Customer{\r\n\r\n    constructor(public id : number,\r\n        public name : string,\r\n        public password : string)\r\n        {\r\n            \r\n        }\r\n}","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { CreateCompanyComponent } from './components/create-company/create-company.component';\nimport { GetAllCompaniesComponent } from './components/get-all-companies/get-all-companies.component';\nimport { CreateCustomerComponent } from './components/create-customer/create-customer.component';\nimport { GetAllCustomersComponent } from './components/get-all-customers/get-all-customers.component';\nimport { HomeComponent } from './components/home/home.component';\nimport { UpdateCompanyComponent } from './components/update-company/update-company.component';\nimport { UpdateCustomerComponent } from './components/update-customer/update-customer.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: HomeComponent\n  },\n  {\n    path: 'createcompany',\n    component: CreateCompanyComponent\n  },\n  {\n    path: 'getallcompanies',\n    component: GetAllCompaniesComponent\n  },\n  {\n    path: 'updatecompany/:id',\n    component: UpdateCompanyComponent\n  },\n  {\n    path: 'createcustomer',\n    component: CreateCustomerComponent\n  },\n  {\n    path: 'getallcustomers',\n    component: GetAllCustomersComponent\n  },\n  {\n    path: 'updatecustomer/:id',\n    component: UpdateCustomerComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<!--navigation bar-->\\n<nav class=\\\"navbar fixed-top navbar-expand-lg bg-dark navbar-dark\\\">\\n    <ul class=\\\"navbar-nav\\\">\\n        <li class=\\\"nav-item active\\\">\\n        <a class=\\\"nav-link\\\" routerLink=\\\"/\\\"><i class=\\\"fas fa-home\\\"></i> Home</a>\\n        </li>\\n        <li class=\\\"nav-item dropdown active\\\">\\n            <a class=\\\"nav-link dropdown-toggle\\\" href=\\\"#\\\" id=\\\"navbarDropdown\\\" role=\\\"button\\\" data-toggle=\\\"dropdown\\\" aria-haspopup=\\\"true\\\" aria-expanded=\\\"false\\\">\\n            Company\\n            </a>\\n            <div class=\\\"dropdown-menu\\\" aria-labelledby=\\\"navbarDropdown\\\">\\n            <a class=\\\"dropdown-item\\\" routerLink=\\\"/createcompany\\\"><i class=\\\"fas fa-plus\\\"></i>Add Company</a>\\n            <a class=\\\"dropdown-item\\\" routerLink=\\\"/getallcompanies\\\"><i class=\\\"fas fa-list-ul\\\"></i> Get All Companies</a>\\n            </div>\\n        </li>\\n        <li class=\\\"nav-item dropdown active\\\">\\n            <a class=\\\"nav-link dropdown-toggle\\\" href=\\\"#\\\" id=\\\"navbarDropdown\\\" role=\\\"button\\\" data-toggle=\\\"dropdown\\\" aria-haspopup=\\\"true\\\" aria-expanded=\\\"false\\\">\\n                Customer\\n            </a>\\n            <div class=\\\"dropdown-menu\\\" aria-labelledby=\\\"navbarDropdown\\\">\\n                <a class=\\\"dropdown-item\\\" routerLink=\\\"/createcustomer\\\"><i class=\\\"fas fa-plus\\\"></i>Add Customer</a>\\n                <a class=\\\"dropdown-item\\\" routerLink=\\\"/getallcustomers\\\"><i class=\\\"fas fa-list-ul\\\"></i> Get All Customers</a>\\n            </div>\\n        </li>\\n        <li class=\\\"nav-item active\\\">\\n        <a class=\\\"nav-link\\\" (click)=\\\"logOut()\\\">log out <i class=\\\"fas fa-sign-out-alt\\\"></i></a>\\n        </li>\\n    </ul>\\n</nav>\\n<br><br>\\n<br><br>\\n<router-outlet></router-outlet>\\n<br><br>\\n<br><br>\\n\"","import { Component } from '@angular/core';\nimport { SharedCompanyDataService } from './services/shared-company-data.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'CouponSystem';\n\n  request : Request\n  response : Response\n\n  //provide SharedCompanyDataService for service\n  constructor(private _sharedDataService:SharedCompanyDataService) {  }\n\n  ngOnInit(){\n  }\n\n  //log out method, send the client to login page\n  logOut(){\n    this._sharedDataService.logOut(this.request, this.response).\n    subscribe(\n      (resp)=>\n      {\n        window.location.href = this._sharedDataService.loginPageURL;\n      }\n    )\n  }\n\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { AppComponent } from './app.component';\nimport { AppRoutingModule } from './app-routing.module';\nimport { CreateCompanyComponent } from './components/create-company/create-company.component';\nimport { HttpModule } from '@angular/http';\nimport { GetAllCompaniesComponent } from './components/get-all-companies/get-all-companies.component';\nimport { CreateCustomerComponent } from './components/create-customer/create-customer.component';\nimport { GetAllCustomersComponent } from './components/get-all-customers/get-all-customers.component';\nimport { HomeComponent } from './components/home/home.component';\nimport { SharedCompanyDataService } from './services/shared-company-data.service';\nimport { SharedCustomerDataService } from './services/shared-customer-data.service';\nimport { UpdateCompanyComponent } from './components/update-company/update-company.component';\nimport { UpdateCustomerComponent } from './components/update-customer/update-customer.component';\nimport { HashLocationStrategy, LocationStrategy } from '@angular/common';\nimport { FilterPipe } from './pipes/filter.pipe';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    CreateCompanyComponent,\n    GetAllCompaniesComponent,\n    CreateCustomerComponent,\n    GetAllCustomersComponent,\n    HomeComponent,\n    UpdateCompanyComponent,\n    UpdateCustomerComponent,\n    FilterPipe\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    AppRoutingModule,\n    FormsModule,\n    ReactiveFormsModule.withConfig({warnOnNgModelWithFormControl: 'never'}),\n    HttpModule\n  ],\n  providers: [SharedCompanyDataService, \n      SharedCustomerDataService, {provide: LocationStrategy, useClass:HashLocationStrategy}],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"form{\\r\\n    margin-left: 20%;\\r\\n    width: 30%;\\r\\n}\\r\\ntable{\\r\\n    margin-left: 20%;\\r\\n    width: 60%;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9jcmVhdGUtY29tcGFueS9jcmVhdGUtY29tcGFueS5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksaUJBQWlCO0lBQ2pCLFdBQVc7Q0FDZDtBQUNEO0lBQ0ksaUJBQWlCO0lBQ2pCLFdBQVc7Q0FDZCIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvY3JlYXRlLWNvbXBhbnkvY3JlYXRlLWNvbXBhbnkuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbImZvcm17XHJcbiAgICBtYXJnaW4tbGVmdDogMjAlO1xyXG4gICAgd2lkdGg6IDMwJTtcclxufVxyXG50YWJsZXtcclxuICAgIG1hcmdpbi1sZWZ0OiAyMCU7XHJcbiAgICB3aWR0aDogNjAlO1xyXG59Il19 */\"","module.exports = \"<!--form for add company-->\\n<form novalidate [formGroup]=\\\"myForm\\\">\\n  <legend>Create Company</legend>\\n\\n  <!--input field for name-->\\n  <div class=\\\"form-group\\\">\\n    <label>Name</label>\\n    <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"name\\\" placeholder=\\\"Name\\\" [(ngModel)]=\\\"companyAdd.name\\\" \\n      [ngClass]=\\\"{ 'is-invalid': myForm.controls.name.errors && (myForm.controls.name.touched || myForm.controls.name.dirty) }\\\">\\n    <div *ngIf=\\\"myForm.controls.name.errors && (myForm.controls.name.touched || myForm.controls.name.dirty)\\\" class=\\\"invalid-feedback\\\">\\n      <small *ngIf=\\\"myForm.controls.name.errors.required\\\">Name is required</small>\\n    </div>\\n  </div>\\n\\n  <!--input field for password-->\\n  <div class=\\\"form-group\\\">\\n    <label>Password</label>\\n    <input type=\\\"password\\\" class=\\\"form-control\\\" formControlName=\\\"password\\\" placeholder=\\\"Password\\\" [(ngModel)]=\\\"companyAdd.password\\\" \\n      [ngClass]=\\\"{ 'is-invalid': myForm.controls.password.errors && (myForm.controls.password.touched || myForm.controls.password.dirty) }\\\">\\n    <div *ngIf=\\\"myForm.controls.password.errors && (myForm.controls.password.touched || myForm.controls.password.dirty)\\\" class=\\\"invalid-feedback\\\">\\n      <small *ngIf=\\\"myForm.controls.password.errors.required\\\">Password is required</small>\\n      <small *ngIf=\\\"myForm.controls.password.errors.minlength\\\">Password must be at least 5 characters</small>\\n      <small *ngIf=\\\"myForm.controls.password.errors.maxlength\\\">Password must be maximum 8 characters</small>\\n    </div>\\n  </div>\\n\\n  <!--input field for email-->\\n  <div class=\\\"form-group\\\">\\n    <label>Email</label>\\n    <input type=\\\"email\\\" class=\\\"form-control\\\" formControlName=\\\"email\\\" placeholder=\\\"Email\\\" [(ngModel)]=\\\"companyAdd.email\\\" \\n      [ngClass]=\\\"{ 'is-invalid': myForm.controls.email.errors && (myForm.controls.email.touched || myForm.controls.email.dirty) }\\\">\\n    <div *ngIf=\\\"myForm.controls.email.errors && (myForm.controls.email.touched || myForm.controls.email.dirty)\\\" class=\\\"invalid-feedback\\\">\\n      <small *ngIf=\\\"myForm.controls.email.errors.required\\\">Email is required</small>\\n      <small *ngIf=\\\"myForm.controls.email.errors.email\\\">Email must be a valid email address</small>\\n    </div>\\n  </div>\\n\\n  <!--button become enable only when the form valid-->\\n  <button (click)=\\\"addCompany()\\\" [disabled]=\\\"!myForm.valid\\\" class=\\\"btn btn-success\\\">ADD COMPANY</button>\\n</form>\\n\\n<br>\\n<!--table shows the company the admin added with the generated id-->\\n<table class=\\\"table table-striped table-bordered\\\" *ngIf=\\\"showTable\\\">\\n  <thead>\\n    <tr>\\n      <th>ID</th>\\n      <th>Name</th>\\n      <th>Password</th>\\n      <th>Email</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <td>{{companyAdded.id}}</td>\\n      <td>{{companyAdded.name}}</td>\\n      <td>{{companyAdded.password}}</td>\\n      <td>{{companyAdded.email}}</td>\\n    </tr>\\n  </tbody>\\n</table>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { Company } from '../../Common/Company';\nimport { SharedCompanyDataService } from '../../services/shared-company-data.service';\nimport swal from 'sweetalert2';\nimport { FormGroup, Validators, FormBuilder } from '@angular/forms';\n\n@Component({\n  selector: 'app-create-company',\n  templateUrl: './create-company.component.html',\n  styleUrls: ['./create-company.component.css']\n})\nexport class CreateCompanyComponent implements OnInit {\n\n  companyAdd : Company = new Company(0, \"\", \"\", \"\");\n  companyAdded : Company = new Company(0, \"\", \"\", \"\");\n  showTable = false;\n  myForm: FormGroup;\n  \n  //in the constructor we provide SharedCompanyDataService for service and FormBuilder for form validation\n  constructor(private _sharedDataService:SharedCompanyDataService, private _formBuilder:FormBuilder) {  }\n\n  //initialize form validation\n  ngOnInit() {\n    this.formValidation();\n  }\n\n  //form validation conditions\n  formValidation(){\n    this.myForm = this._formBuilder.group({\n      name: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(5), Validators.maxLength(8)]]\n    });\n  }\n\n  //add company to DB\n  addCompany(){\n    this._sharedDataService.addCompany(this.companyAdd).\n    subscribe(\n      (resp) =>\n      {\n        this.companyAdded=resp.json();\n        this.showTable = true;\n        this.companyAdd = new Company(0, \"\", \"\", \"\");\n        swal({\n          type: 'success',\n          title: 'Company created',\n          showConfirmButton: false,\n          timer: 1500\n        })\n      },\n      (err) =>\n      {\n        if(err.status == 403) {\n          window.location.href = this._sharedDataService.loginPageURL;\n        }else{\n          swal({\n            type: 'error',\n            title: 'Oops...',\n            text: err._body\n          })\n        }\n      }\n    )\n  }\n\n}\n","module.exports = \"form{\\r\\n    margin-left: 20%;\\r\\n    width: 30%;\\r\\n}\\r\\ntable{\\r\\n    margin-left: 25%;\\r\\n    width: 50%;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9jcmVhdGUtY3VzdG9tZXIvY3JlYXRlLWN1c3RvbWVyLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxpQkFBaUI7SUFDakIsV0FBVztDQUNkO0FBQ0Q7SUFDSSxpQkFBaUI7SUFDakIsV0FBVztDQUNkIiwiZmlsZSI6InNyYy9hcHAvY29tcG9uZW50cy9jcmVhdGUtY3VzdG9tZXIvY3JlYXRlLWN1c3RvbWVyLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJmb3Jte1xyXG4gICAgbWFyZ2luLWxlZnQ6IDIwJTtcclxuICAgIHdpZHRoOiAzMCU7XHJcbn1cclxudGFibGV7XHJcbiAgICBtYXJnaW4tbGVmdDogMjUlO1xyXG4gICAgd2lkdGg6IDUwJTtcclxufSJdfQ== */\"","module.exports = \"<!--form for add customer-->\\n<form novalidate [formGroup]=\\\"myForm\\\">\\n  <legend>Create Customer</legend>\\n\\n  <!--input field for name-->\\n  <div class=\\\"form-group\\\">\\n    <label>Name</label>\\n    <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"name\\\" placeholder=\\\"Name\\\" [(ngModel)]=\\\"customerAdd.name\\\" \\n      [ngClass]=\\\"{ 'is-invalid': myForm.controls.name.errors && (myForm.controls.name.touched || myForm.controls.name.dirty) }\\\">\\n    <div *ngIf=\\\"myForm.controls.name.errors && (myForm.controls.name.touched || myForm.controls.name.dirty)\\\" class=\\\"invalid-feedback\\\">\\n      <small *ngIf=\\\"myForm.controls.name.errors.required\\\">Name is required</small>\\n    </div>\\n  </div>\\n\\n  <!--input field for password-->\\n  <div class=\\\"form-group\\\">\\n    <label>Password</label>\\n    <input type=\\\"password\\\" class=\\\"form-control\\\" formControlName=\\\"password\\\" placeholder=\\\"Password\\\" [(ngModel)]=\\\"customerAdd.password\\\" \\n      [ngClass]=\\\"{ 'is-invalid': myForm.controls.password.errors && (myForm.controls.password.touched || myForm.controls.password.dirty) }\\\">\\n    <div *ngIf=\\\"myForm.controls.password.errors && (myForm.controls.password.touched || myForm.controls.password.dirty)\\\" class=\\\"invalid-feedback\\\">\\n      <small *ngIf=\\\"myForm.controls.password.errors.required\\\">Password is required</small>\\n      <small *ngIf=\\\"myForm.controls.password.errors.minlength\\\">Password must be at least 5 characters</small>\\n      <small *ngIf=\\\"myForm.controls.password.errors.maxlength\\\">Password must be maximum 8 characters</small>\\n    </div>\\n  </div>\\n\\n  <!--button become enable only when the form valid-->\\n  <button (click)=\\\"addCustomer()\\\" [disabled]=\\\"!myForm.valid\\\" class=\\\"btn btn-success\\\">ADD CUSTOMER</button>\\n</form>\\n\\n<br>\\n<!--table shows the customer the admin added with the generated id-->\\n<table  class=\\\"table table-striped table-bordered\\\" *ngIf=\\\"showTable\\\">\\n  <thead>\\n    <tr>\\n      <th>ID</th>\\n      <th>Name</th>\\n      <th>Password</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <td>{{customerAdded.id}}</td>\\n      <td>{{customerAdded.name}}</td>\\n      <td>{{customerAdded.password}}</td>\\n    </tr>\\n  </tbody>\\n</table>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { Customer } from '../../Common/Customer';\nimport { SharedCustomerDataService } from '../../services/shared-customer-data.service';\nimport swal from 'sweetalert2';\nimport { FormGroup, Validators, FormBuilder } from '@angular/forms';\n\n@Component({\n  selector: 'app-create-customer',\n  templateUrl: './create-customer.component.html',\n  styleUrls: ['./create-customer.component.css']\n})\nexport class CreateCustomerComponent implements OnInit {\n\n  customerAdd : Customer = new Customer(0, \"\", \"\");\n  customerAdded : Customer = new Customer(0, \"\", \"\");\n  showTable = false;\n  myForm: FormGroup;\n\n  //in the constructor we provide SharedCustomerDataService for service and FormBuilder for form validation\n  constructor(private _sharedDataService:SharedCustomerDataService, private _formBuilder:FormBuilder) {  }\n\n  //initialize form validation\n  ngOnInit() {\n    this.formValidation();\n  }\n\n  //form validation conditions\n  formValidation(){\n    this.myForm = this._formBuilder.group({\n      name: ['', Validators.required],\n      password: ['', [Validators.required, Validators.minLength(5), Validators.maxLength(8)]]\n    });\n  }\n\n  //add customer to DB\n  addCustomer(){\n    this._sharedDataService.addCustomer(this.customerAdd).\n    subscribe(\n      (resp) =>\n      {\n        swal({\n          type: 'success',\n          title: 'Customer created',\n          showConfirmButton: false,\n          timer: 1500\n        })\n        this.customerAdded = resp.json();\n        this.showTable = true;\n        this.customerAdd = new Customer(0, \"\", \"\");\n      },\n      (err)=>\n      {\n        if(err.status == 403) {\n          window.location.href = this._sharedDataService.loginPageURL;\n        }else{\n          swal({\n            type: 'error',\n            title: 'Oops...',\n            text: err._body\n          })\n        }\n      }\n    )\n  }\n\n}\n","module.exports = \"#searchAndTable{\\r\\n    margin-left: 20%;\\r\\n    width: 60%;\\r\\n}\\r\\n#column{\\r\\n    width: 8%;\\r\\n}\\r\\n#email{\\r\\n    width: 30%;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9nZXQtYWxsLWNvbXBhbmllcy9nZXQtYWxsLWNvbXBhbmllcy5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksaUJBQWlCO0lBQ2pCLFdBQVc7Q0FDZDtBQUNEO0lBQ0ksVUFBVTtDQUNiO0FBQ0Q7SUFDSSxXQUFXO0NBQ2QiLCJmaWxlIjoic3JjL2FwcC9jb21wb25lbnRzL2dldC1hbGwtY29tcGFuaWVzL2dldC1hbGwtY29tcGFuaWVzLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIjc2VhcmNoQW5kVGFibGV7XHJcbiAgICBtYXJnaW4tbGVmdDogMjAlO1xyXG4gICAgd2lkdGg6IDYwJTtcclxufVxyXG4jY29sdW1ue1xyXG4gICAgd2lkdGg6IDglO1xyXG59XHJcbiNlbWFpbHtcclxuICAgIHdpZHRoOiAzMCU7XHJcbn0iXX0= */\"","module.exports = \"<!--input for search-->\\n<input class=\\\"form-control\\\" type=\\\"text\\\" name=\\\"serachString\\\" [(ngModel)]=\\\"searchString\\\" placeholder=\\\"Search..\\\" id=\\\"searchAndTable\\\">\\n\\n<!--table for all companies-->\\n<table class=\\\"table table-hover\\\" id=\\\"searchAndTable\\\">\\n  <thead class=\\\"thead-dark\\\">\\n    <tr>\\n      <th id=\\\"column\\\">ID</th>\\n      <th>Name</th>\\n      <th>Password</th>\\n      <th id=\\\"email\\\">Email</th>\\n      <th id=\\\"column\\\">Delete</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr *ngFor = \\\"let comp of companies | filter : 'name' : searchString\\\">\\n      <td (click)=\\\"routeToUpdate(comp.id)\\\">{{comp.id}}</td>\\n      <td (click)=\\\"routeToUpdate(comp.id)\\\">{{comp.name}}</td>\\n      <td (click)=\\\"routeToUpdate(comp.id)\\\">{{comp.password}}</td>\\n      <td (click)=\\\"routeToUpdate(comp.id)\\\">{{comp.email}}</td>\\n      <td class=\\\"text-center\\\"><button type=\\\"button\\\" (click)=\\\"deleteCompany(comp.id)\\\" class=\\\"btn btn-danger btn-sm\\\">\\n          <i class=\\\"fas fa-trash-alt\\\"></i>\\n        </button></td>\\n    </tr>\\n  </tbody>\\n</table>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { Company } from '../../Common/Company';\nimport { SharedCompanyDataService } from '../../services/shared-company-data.service';\nimport swal from 'sweetalert2';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-get-all-companies',\n  templateUrl: './get-all-companies.component.html',\n  styleUrls: ['./get-all-companies.component.css']\n})\nexport class GetAllCompaniesComponent implements OnInit {\n\n  public company : Company;\n  public searchString : string;\n  public companies : Company[]\n\n  //in the constructor we provide SharedCompanyDataService for service and Router for routing to another components\n  constructor(private _sharedDataService:SharedCompanyDataService, private _router:Router) {  }\n\n  //load the companies list\n  ngOnInit() {\n    this.getCompanies();\n  }\n\n  //get companies\n  getCompanies(){\n    this._sharedDataService.getAllCompanies().\n    subscribe(\n      (resp) =>\n      {\n        this.companies = resp.json();\n      },\n      (err) =>\n      {\n        if(err.status == 403) {\n          window.location.href = this._sharedDataService.loginPageURL;\n        }else{\n          swal({\n            type: 'error',\n            title: 'Oops...',\n            text: err._body\n          })\n        }\n      }\n    )\n  }\n\n  //method for delete company by id\n  deleteCompany(id : number){\n    swal({\n      title: 'Are you sure you want to delete company?',\n      text: \"You won't be able to revert this!\",\n      type: 'warning',\n      showCancelButton: true,\n      confirmButtonColor: '#3085d6',\n      cancelButtonColor: '#d33',\n      confirmButtonText: 'Yes, delete it!',\n      cancelButtonText: 'No'\n    }).then((result) => {\n      if (result.value) {\n        this._sharedDataService.deleteCompany(id).\n        subscribe(\n          (resp) =>\n          {\n            swal({\n              title: 'Deleted!',\n              text: 'Company has been deleted.',\n              type: 'success',\n              showConfirmButton: false,\n              timer: 1500\n            })\n            this.getCompanies();\n          },\n          (err) =>\n          {\n            if(err.status == 403) {\n              window.location.href = this._sharedDataService.loginPageURL;\n            }else{\n              swal({\n                type: 'error',\n                title: 'Oops...',\n                text: err._body\n              })\n            }\n          }\n        )\n      }\n    })\n  }\n\n  //this method routing to updateCompanyComponent by click on company in the table and pass its id in URL\n  routeToUpdate(id : number){\n    this._router.navigate(['updatecompany', id])\n  }\n\n}\n","module.exports = \"#searchAndTable{\\r\\n    margin-left: 30%;\\r\\n    width: 40%;\\r\\n}\\r\\n#id{\\r\\n    width: 15%;\\r\\n}\\r\\n#password{\\r\\n    width: 40%;\\r\\n}\\r\\n#delete{\\r\\n    width: 8%;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9nZXQtYWxsLWN1c3RvbWVycy9nZXQtYWxsLWN1c3RvbWVycy5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksaUJBQWlCO0lBQ2pCLFdBQVc7Q0FDZDtBQUNEO0lBQ0ksV0FBVztDQUNkO0FBQ0Q7SUFDSSxXQUFXO0NBQ2Q7QUFDRDtJQUNJLFVBQVU7Q0FDYiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvZ2V0LWFsbC1jdXN0b21lcnMvZ2V0LWFsbC1jdXN0b21lcnMuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIiNzZWFyY2hBbmRUYWJsZXtcclxuICAgIG1hcmdpbi1sZWZ0OiAzMCU7XHJcbiAgICB3aWR0aDogNDAlO1xyXG59XHJcbiNpZHtcclxuICAgIHdpZHRoOiAxNSU7XHJcbn1cclxuI3Bhc3N3b3Jke1xyXG4gICAgd2lkdGg6IDQwJTtcclxufVxyXG4jZGVsZXRle1xyXG4gICAgd2lkdGg6IDglO1xyXG59Il19 */\"","module.exports = \"<!--input for search-->\\n<input class=\\\"form-control\\\" type=\\\"text\\\" name=\\\"serachString\\\" [(ngModel)]=\\\"searchString\\\" placeholder=\\\"Search..\\\" id=\\\"searchAndTable\\\">\\n\\n<!--table for all customers-->\\n<table id=\\\"searchAndTable\\\" class=\\\"table table-hover\\\">\\n  <thead class=\\\"thead-dark\\\">\\n    <tr>\\n      <th id=\\\"id\\\">ID</th>\\n      <th>Name</th>\\n      <th id=\\\"password\\\">Password</th>\\n      <th id=\\\"delete\\\">Delete</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr *ngFor = \\\"let cust of customers | filter : 'name' : searchString\\\">\\n      <td (click)=\\\"routeToUpdate(cust.id)\\\">{{cust.id}}</td>\\n      <td (click)=\\\"routeToUpdate(cust.id)\\\">{{cust.name}}</td>\\n      <td (click)=\\\"routeToUpdate(cust.id)\\\">{{cust.password}}</td>\\n      <td class=\\\"text-center\\\"><button type=\\\"button\\\" (click)=\\\"deleteCustomer(cust.id)\\\" class=\\\"btn btn-danger btn-sm\\\">\\n          <i class=\\\"fas fa-trash-alt\\\"></i>\\n        </button></td>\\n    </tr>\\n  </tbody>\\n</table>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { Customer } from '../../Common/Customer';\nimport { SharedCustomerDataService } from '../../services/shared-customer-data.service';\nimport swal from 'sweetalert2';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-get-all-customers',\n  templateUrl: './get-all-customers.component.html',\n  styleUrls: ['./get-all-customers.component.css']\n})\nexport class GetAllCustomersComponent implements OnInit {\n\n  public customer : Customer;\n  public searchString : string;\n  public customers : Customer[]\n\n  //in the constructor we provide SharedCustomerDataService for service and Router for routing to another components\n  constructor(private _sharedDataService:SharedCustomerDataService, private _router:Router) {  }\n\n  //load the customers list\n  ngOnInit() {\n    this.getCustomers();\n  }\n\n  //get customers\n  getCustomers(){\n    this._sharedDataService.getAllCustomers().\n    subscribe(\n      (resp) =>\n      {\n        this.customers = resp.json()\n      },\n      (err) =>\n      {\n        if(err.status == 403) {\n          window.location.href = this._sharedDataService.loginPageURL;\n        }else{\n          swal({\n            type: 'error',\n            title: 'Oops...',\n            text: err._body\n          })\n        }\n      }\n    )\n  }\n\n  //method for delete customer by id\n  deleteCustomer(id : number){\n    swal({\n      title: 'Are you sure?',\n      text: \"You won't be able to revert this!\",\n      type: 'warning',\n      showCancelButton: true,\n      confirmButtonColor: '#3085d6',\n      cancelButtonColor: '#d33',\n      confirmButtonText: 'Yes, delete it!',\n      cancelButtonText: 'No'\n    }).then((result) => {\n      if (result.value) {\n        this._sharedDataService.deleteCustomer(id).\n        subscribe(\n          (resp) =>\n          {\n            swal({\n              title: 'Deleted!',\n              text: 'Customer has been deleted.',\n              type: 'success',\n              showConfirmButton: false,\n              timer: 1500\n            })\n            this.getCustomers();\n          },\n          (err) =>\n          {\n            if(err.status == 403) {\n              window.location.href = this._sharedDataService.loginPageURL;\n            }else{\n              swal({\n                type: 'error',\n                title: 'Oops...',\n                text: err._body\n              })\n            }\n          }\n        )\n      }\n    })\n  }\n\n  //this method routing to updateCustomerComponent by click on customer in the table and pass its id in URL\n  routeToUpdate(id : number){\n    this._router.navigate(['updatecustomer', id])\n  }\n\n}\n","module.exports = \"h3{\\r\\n    margin-left: 20%;\\r\\n    margin-top:5%;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9ob21lL2hvbWUuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLGlCQUFpQjtJQUNqQixjQUFjO0NBQ2pCIiwiZmlsZSI6InNyYy9hcHAvY29tcG9uZW50cy9ob21lL2hvbWUuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbImgze1xyXG4gICAgbWFyZ2luLWxlZnQ6IDIwJTtcclxuICAgIG1hcmdpbi10b3A6NSU7XHJcbn0iXX0= */\"","module.exports = \"<h3>\\r\\n    Hello Admin<br>\\r\\n    welcome to Coupon System\\r\\n</h3>\\r\\n\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"form{\\r\\n    margin-left: 20%;\\r\\n    width: 30%;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy91cGRhdGUtY29tcGFueS91cGRhdGUtY29tcGFueS5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksaUJBQWlCO0lBQ2pCLFdBQVc7Q0FDZCIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvdXBkYXRlLWNvbXBhbnkvdXBkYXRlLWNvbXBhbnkuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbImZvcm17XHJcbiAgICBtYXJnaW4tbGVmdDogMjAlO1xyXG4gICAgd2lkdGg6IDMwJTtcclxufSJdfQ== */\"","module.exports = \"<!--form for update company-->\\n<form [formGroup]=\\\"myForm\\\">\\n    <button class=\\\"btn btn-outline-success\\\" (click)=\\\"backToCompanies()\\\"><i class=\\\"fas fa-long-arrow-alt-left\\\"></i> Back</button>\\n  <legend>Update Company</legend>\\n\\n  <div class=\\\"form-group\\\">\\n    <label>ID</label>\\n    <input type=\\\"number\\\" class=\\\"form-control\\\" formControlName=\\\"id\\\" disabled [(ngModel)]=\\\"companyUpdate.id\\\">\\n  </div>\\n\\n  <div class=\\\"form-group\\\">\\n    <label>Name</label>\\n    <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"name\\\" disabled [(ngModel)]=\\\"companyUpdate.name\\\">\\n  </div>\\n\\n  <div class=\\\"form-group\\\">\\n    <label>Password</label>\\n    <input type=\\\"password\\\" class=\\\"form-control\\\" formControlName=\\\"password\\\" placeholder=\\\"Password\\\" [(ngModel)]=\\\"companyUpdate.password\\\" \\n      [ngClass]=\\\"{ 'is-invalid': myForm.controls.password.errors && (myForm.controls.password.touched || myForm.controls.password.dirty) }\\\">\\n    <div *ngIf=\\\"myForm.controls.password.errors && (myForm.controls.password.touched || myForm.controls.password.dirty)\\\" class=\\\"invalid-feedback\\\">\\n      <small *ngIf=\\\"myForm.controls.password.errors.required\\\">Password is required</small>\\n      <small *ngIf=\\\"myForm.controls.password.errors.minlength\\\">Password must be at least 5 characters</small>\\n      <small *ngIf=\\\"myForm.controls.password.errors.maxlength\\\">Password must be maximum 8 characters</small>\\n    </div>\\n  </div>\\n\\n  <div class=\\\"form-group\\\">\\n    <label>Email</label>\\n    <input type=\\\"email\\\" class=\\\"form-control\\\" formControlName=\\\"email\\\" placeholder=\\\"Email\\\" [(ngModel)]=\\\"companyUpdate.email\\\" \\n      [ngClass]=\\\"{ 'is-invalid': myForm.controls.email.errors && (myForm.controls.email.touched || myForm.controls.email.dirty) }\\\">\\n    <div *ngIf=\\\"myForm.controls.email.errors && (myForm.controls.email.touched || myForm.controls.email.dirty)\\\" class=\\\"invalid-feedback\\\">\\n      <small *ngIf=\\\"myForm.controls.email.errors.required\\\">Email is required</small>\\n      <small *ngIf=\\\"myForm.controls.email.errors.email\\\">Email must be a valid email address</small>\\n    </div>\\n  </div>\\n\\n  <!--button become enable only when the form valid-->\\n  <button (click)=\\\"updateCompany()\\\" [disabled]=\\\"!myForm.valid\\\" class=\\\"btn btn-success\\\">UPDATE COMPANY</button>\\n</form>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { SharedCompanyDataService } from '../../services/shared-company-data.service';\nimport { Company } from '../../Common/Company';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport swal from 'sweetalert2';\nimport { FormGroup, Validators, FormBuilder } from '@angular/forms';\n\n@Component({\n  selector: 'app-update-company',\n  templateUrl: './update-company.component.html',\n  styleUrls: ['./update-company.component.css']\n})\nexport class UpdateCompanyComponent implements OnInit {\n\n  public companyUpdate : Company = new Company(0, \"\", \"\", \"\");\n  myForm: FormGroup;\n\n  //in the constructor we provide SharedCompanyDataService for service and Router for routing to another components\n  //ActivatedRoute to contain the company id that sent from allCompaniesComponent and FormBuilder for form validation\n  constructor(private _sharedDataService:SharedCompanyDataService,\n    private _router:Router, private _route:ActivatedRoute, private _formBuilder:FormBuilder) { \n  }\n\n  //load the company by id from DB and inject it to the form\n  //load form validation\n  ngOnInit() {\n    this.getCompanyByIdParam();\n    this.formValidation();\n  }\n\n  //get the company by id that gets in URL\n  getCompanyByIdParam(){\n    this._route.params.\n    subscribe(params=>{\n      this._sharedDataService.getCompany(params[\"id\"]).\n      subscribe(\n        (resp)=>{\n          this.companyUpdate = resp.json();\n        },\n        (err) =>\n        {\n          if(err.status == 403) {\n            window.location.href = this._sharedDataService.loginPageURL;\n          }else{\n            swal({\n              type: 'error',\n              title: 'Oops...',\n              text: err._body\n            })\n          }\n        }\n      )\n    })\n  }\n\n  //form validation conditions\n  formValidation(){\n    this.myForm = this._formBuilder.group({\n      id: [],\n      name: [],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(5), Validators.maxLength(8)]]\n    });\n  }\n\n  //route back to all companies component\n  backToCompanies(){\n    this._router.navigate(['getallcompanies'])\n  }\n\n  //send the update request and route back to all companies\n  updateCompany(){\n    swal({\n      title: 'Are you sure you want to update?',\n      type: 'question',\n      showCancelButton: true,\n      confirmButtonColor: '#3085d6',\n      cancelButtonColor: '#d33',\n      confirmButtonText: 'Yes',\n      cancelButtonText: 'No'\n    }).then((result) => {\n      if (result.value) {\n        this._sharedDataService.updateCompany(this.companyUpdate).\n        subscribe(\n          (resp) =>\n          {\n            swal({\n              title: 'Updated!',\n              type: 'success',\n              showConfirmButton: false,\n              timer: 1500\n            })\n            this.companyUpdate = new Company(0, \"\", \"\", \"\");\n            this._router.navigate(['getallcompanies'])\n          },\n          (err) =>\n          {\n            if(err.status == 403) {\n              window.location.href = this._sharedDataService.loginPageURL;\n            }else{\n              swal({\n                type: 'error',\n                title: 'Oops...',\n                text: err._body\n              })\n            }\n          }\n        )\n      }\n    })\n  }\n\n}\n","module.exports = \"form{\\r\\n    margin-left: 20%;\\r\\n    width: 30%;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy91cGRhdGUtY3VzdG9tZXIvdXBkYXRlLWN1c3RvbWVyLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxpQkFBaUI7SUFDakIsV0FBVztDQUNkIiwiZmlsZSI6InNyYy9hcHAvY29tcG9uZW50cy91cGRhdGUtY3VzdG9tZXIvdXBkYXRlLWN1c3RvbWVyLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJmb3Jte1xyXG4gICAgbWFyZ2luLWxlZnQ6IDIwJTtcclxuICAgIHdpZHRoOiAzMCU7XHJcbn0iXX0= */\"","module.exports = \"<!--form for update customer-->\\n<form [formGroup]=\\\"myForm\\\">\\n  <button class=\\\"btn btn-outline-success\\\" (click)=\\\"backToCustomers()\\\"><i class=\\\"fas fa-long-arrow-alt-left\\\"></i> Back</button>\\n  <legend>Update Customer</legend>\\n\\n  <div class=\\\"form-group\\\">\\n    <label>ID</label>\\n    <input type=\\\"number\\\" class=\\\"form-control\\\" formControlName=\\\"id\\\" disabled [(ngModel)]=\\\"customerUpdate.id\\\">\\n  </div>\\n\\n  <div class=\\\"form-group\\\">\\n    <label>Name</label>\\n    <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"name\\\" disabled [(ngModel)]=\\\"customerUpdate.name\\\">\\n  </div>\\n\\n  <div class=\\\"form-group\\\">\\n    <label>Password</label>\\n    <input type=\\\"password\\\" class=\\\"form-control\\\" formControlName=\\\"password\\\" placeholder=\\\"Password\\\" [(ngModel)]=\\\"customerUpdate.password\\\" \\n      [ngClass]=\\\"{ 'is-invalid': myForm.controls.password.errors && (myForm.controls.password.touched || myForm.controls.password.dirty) }\\\">\\n    <div *ngIf=\\\"myForm.controls.password.errors && (myForm.controls.password.touched || myForm.controls.password.dirty)\\\" class=\\\"invalid-feedback\\\">\\n      <small *ngIf=\\\"myForm.controls.password.errors.required\\\">Password is required</small>\\n      <small *ngIf=\\\"myForm.controls.password.errors.minlength\\\">Password must be at least 5 characters</small>\\n      <small *ngIf=\\\"myForm.controls.password.errors.maxlength\\\">Password must be maximum 8 characters</small>\\n    </div>\\n  </div>\\n\\n  <!--button become enable only when the form valid-->\\n  <button (click)=\\\"updateCustomer()\\\" [disabled]=\\\"!myForm.valid\\\" class=\\\"btn btn-success\\\">UPDATE CUSTOMER</button>\\n</form>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { SharedCustomerDataService } from '../../services/shared-customer-data.service';\nimport { Customer } from '../../Common/Customer';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport swal from 'sweetalert2';\nimport { FormGroup, Validators, FormBuilder } from '@angular/forms';\n\n@Component({\n  selector: 'app-update-customer',\n  templateUrl: './update-customer.component.html',\n  styleUrls: ['./update-customer.component.css']\n})\nexport class UpdateCustomerComponent implements OnInit {\n\n  public customerUpdate : Customer = new Customer(0, \"\", \"\");\n  myForm: FormGroup;\n\n  //in the constructor we provide SharedCustomerDataService for service and Router for routing to another components\n  //ActivatedRoute to contain the customer id that sent from allCustomersComponent and FormBuilder for form validation\n  constructor(private _sharedDataService:SharedCustomerDataService,\n    private _router:Router, private _route:ActivatedRoute, private _formBuilder:FormBuilder) {\n  }\n\n  //load the customer by id from DB and inject it to the form\n  //load form validation\n  ngOnInit() {\n    this.getCustomerByIdParam();\n    this.formValidation();\n  }\n\n  //get the customer by id that gets in URL\n  getCustomerByIdParam(){\n    this._route.params.\n    subscribe(params=>{\n      this._sharedDataService.getCustomer(params[\"id\"]).\n      subscribe(\n        (resp)=>\n        {\n          this.customerUpdate = resp.json();\n        },\n        (err) =>\n        {\n          if(err.status == 403) {\n            window.location.href = this._sharedDataService.loginPageURL;\n          }else{\n            swal({\n              type: 'error',\n              title: 'Oops...',\n              text: err._body\n            })\n          }\n        }\n      )\n    })\n  }\n\n  //form validation conditions\n  formValidation(){\n    this.myForm = this._formBuilder.group({\n      id: [],\n      name: [],\n      password: ['', [Validators.required, Validators.minLength(5), Validators.maxLength(8)]]\n    });\n  }\n\n  //route back to all customers component\n  backToCustomers(){\n    this._router.navigate(['getallcustomers'])\n  }\n\n  //send the update request and route back to all customers\n  updateCustomer(){\n    swal({\n      title: 'Are you sure you want to update?',\n      type: 'question',\n      showCancelButton: true,\n      confirmButtonColor: '#3085d6',\n      cancelButtonColor: '#d33',\n      confirmButtonText: 'Yes',\n      cancelButtonText: 'No'\n    }).then((result) => {\n      if (result.value) {\n        this._sharedDataService.updateCustomer(this.customerUpdate).\n        subscribe(\n          (resp) =>\n          {\n            swal({\n              title: 'Updated!',\n              type: 'success',\n              showConfirmButton: false,\n              timer: 1500\n            })\n            this.customerUpdate = new Customer(0, \"\", \"\");\n            this._router.navigate(['getallcustomers'])\n          },\n          (err) =>\n          {\n            if(err.status == 403) {\n              window.location.href = this._sharedDataService.loginPageURL;\n            }else{\n              swal({\n                type: 'error',\n                title: 'Oops...',\n                text: err._body\n              })\n            }\n          }\n        )\n      }\n    })\n  }\n\n}\n","import { Pipe, PipeTransform, Injectable } from '@angular/core';\n\n@Pipe({\n    name: 'filter',\n})\n//in this class there is a logic to filter for search function\n@Injectable()\nexport class FilterPipe implements PipeTransform {\n    transform(items: any[], field: string, value: string): any[] {\n        if (!items) {\n            return [];\n        }\n        if (!field || !value) {\n            return items;\n        }\n\n        return items.filter(singleItem =>\n            singleItem[field].toLowerCase().includes(value.toLowerCase())\n        );\n    }\n}","import { Injectable } from '@angular/core';\nimport { Http } from '@angular/http';\nimport { Company } from '../Common/Company';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SharedCompanyDataService {\n\n  adminURL = \"http://localhost:8080/admin/company\";\n  loginPageURL = \"http://localhost:8080/login.html\";\n\n  //provide Http for server requests\n  constructor(private _http:Http) { }\n\n  addCompany(company : Company){\n    return this._http.post(this.adminURL, company);\n  }\n\n  getAllCompanies(){\n    return this._http.get(this.adminURL);\n  }\n\n  deleteCompany(id : number){\n    return this._http.delete(this.adminURL+\"/\"+id);\n  }\n\n  updateCompany(company : Company){\n    return this._http.put(this.adminURL+\"/\" + company.id, company);\n  }\n\n  getCompany(id : number){\n    return this._http.get(this.adminURL+\"/\"+id);\n  }\n\n  logOut(request, response){\n    return this._http.post(\"http://localhost:8080/logout\", request, response)\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Http } from '@angular/http';\nimport { Customer } from '../Common/Customer';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SharedCustomerDataService {\n  \n  adminURL = \"http://localhost:8080/admin/customer\";\n  loginPageURL = \"http://localhost:8080/login.html\";\n\n  //provide Http for server requests\n  constructor(private _http:Http) { }\n\n  addCustomer(customer : Customer){\n    return this._http.post(this.adminURL, customer);\n  }\n\n  deleteCustomer(id : number){\n    return this._http.delete(this.adminURL+\"/\"+id);\n  }\n\n  getAllCustomers(){\n    return this._http.get(this.adminURL);\n  }\n\n  updateCustomer(customer : Customer){\n    return this._http.put(this.adminURL+\"/\"+customer.id, customer)\n  }\n\n  getCustomer(id : number){\n    return this._http.get(this.adminURL+\"/\"+id);\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}